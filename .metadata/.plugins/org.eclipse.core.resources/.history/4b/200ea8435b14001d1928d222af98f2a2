package com.sumit.playjava.controller;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.sumit.playjava.model.Transaction;
import com.sumit.playjava.model.User;
import com.sumit.playjava.model.UserAccount;
import com.sumit.playjava.repo.TransactionRepo;
import com.sumit.playjava.repo.UserAccountRepo;
import com.sumit.playjava.repo.UserRepo;
import com.sumit.playjava.service.TransactionService;
import com.sumit.playjava.service.UserAccountService;



@Controller
public class LoginController {
	
	@Autowired
	private UserRepo userRepo;
	
	@Autowired
	UserAccountRepo userAccountRepo;
	
	@Autowired
	private UserAccountService userAccountService;
	
	
	
	@Autowired
	private TransactionService transactionService;
	
	Transaction trans = new Transaction();
	Transaction trans2 = new Transaction();
	UserAccount userAccount = new UserAccount();
	User u = new User();
	UserAccount a = new UserAccount();
	User f = null;
	User g = null;
	User user = new User();
	String uname;
	//int accountnum;
	/*
	 * @Autowired UserAccount userAccount;
	 */
	RestTemplate restTemplate = new RestTemplate();
	
	
	@RequestMapping("/")
	public String checkMVC() {
		return "login";
		
	}
	
	@RequestMapping("/login")
	public String loginHomePage(@RequestParam("username") String username,
			@RequestParam("password") String password, Model model) {
		
		try {
			
			f = userRepo.findByUsername(username);
			g= userRepo.findByPassword(password);
			user.setUsername(username);	
		}catch(Exception e) {
			model.addAttribute("error", "User is not valid");
		}
		if(f!=null && g!=null) {
			
			uname = u.getUsername();
			
			model.addAttribute("username", username);
			model.addAttribute("password", password);
			return "home";
		}
		return "login";
	}
	
	@RequestMapping("/register")
	public String registerService() {
		return "register";
	}
	
	@RequestMapping("/set-user")
	public String registerMicroservice(@RequestParam("username") String username, @RequestParam("password1") String password1, @RequestParam("password2") String password2, @RequestParam("firstname") String firstname, @RequestParam("lastname") String lastname,@RequestParam("contactno") String contactno, Model model) {
		System.out.println("Going to microservice from login microservice start!");
		if(password1.equals(password2) && username != null && password1 != null && firstname != null && lastname != null && contactno != null) {
			restTemplate.getForObject("http://localhost:8082/register-user/"+username+"/"+password1+"/"+firstname+"/"+lastname+"/"+contactno, String.class);
			 model.addAttribute("registerSuccess", "Successfull registered. Kindly login");
		}else {
			model.addAttribute("registrationError", "Passwords are not the same!");
		}
		System.out.println("Register microservice from login microservice end!");
		return "login";
	}
	
	@RequestMapping("/useraccount")
	public ModelAndView home(Model model) {
		if(Objects.nonNull(f)) {
			List<UserAccount> listUserAccount = userAccountService.findByUsername(f.getUsername());			
			model.addAttribute("listAccounts", listUserAccount);
			   ModelAndView mav = new ModelAndView("useraccount");
			   mav.addObject("listUserAccount", listUserAccount);
			   return mav;
		}else {
			   ModelAndView mav = new ModelAndView("redirect:/");
			   return mav;
		}
	   
	}
	
	
	@RequestMapping("/new")
	public String newCustomerForm(Map<String, Object> model) {
	    //UserAccount userAccount = new UserAccount();
	    model.put("useraccount", userAccount);
	    return "new_useraccount";
	}
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String saveCustomer(@ModelAttribute("useraccount") UserAccount userAccount) {
		userAccount.setUsername(f.getUsername());
		userAccount.getUsername();
		userAccountService.save(userAccount);
		//accountNo1 = userAccount.getAccountno();
		//x = userAccount.getTotalbal();
		return "redirect:/useraccount";
	}
	
	/*@RequestMapping("/transaction")
	public ModelAndView transaction() {
		
		if(Objects.nonNull(u.getUsername())) {
			
			List<Transaction> listTransaction = transactionService.listAll();
		    ModelAndView mav = new ModelAndView("transaction");
		    mav.addObject("listTransaction", listTransaction);
		    
		    	return mav;
		}else {
				
		    	
		    	ModelAndView mav = new ModelAndView("redirect:/");
				mav.addObject("user",new Transaction() );
				return mav;
		}
	   
	}*/
	
	
	/*@RequestMapping("/transaction")
	public ModelAndView transaction() {
		
		if(Objects.nonNull(u.getUsername())) {
			a.setAccountno(accountno);
			List<Transaction> listTransaction = transactionService.getTransaction(a.getAccountno());
		    ModelAndView mav = new ModelAndView("transaction");
		    mav.addObject("listTransaction", listTransaction);
		    
		    	return mav;
		}else {
				
		    	
		    	ModelAndView mav = new ModelAndView("redirect:/");
				mav.addObject("user",new Transaction());
				return mav;
		}
	   
	}*/
	
	@RequestMapping("/transaction")
	public ModelAndView transaction(Model model) {
		if(Objects.nonNull(f)) {
			List<Transaction> listTransaction = transactionService.findByUsername(f.getUsername());
		    ModelAndView mav = new ModelAndView("transaction");
		    model.addAttribute("listTransaction", listTransaction);
		    mav.addObject("listTransaction", listTransaction);
		    return mav;
		}else {
			ModelAndView mav = new ModelAndView("redirect:/");
			   return mav;
		}
	}
	
	/*@RequestMapping("/transaction")
	public String transaction(Model model) {	
		if(Objects.nonNull(u.getUsername())) {
			
			List<Transaction> listTransaction = transactionService.getTransaction(a.getAccountno());
			model.addAttribute("listTransaction", listTransaction);
	
		}
		return "redirect:/";	   
	}*/
	
	@RequestMapping("/new-transaction")
	public ModelAndView goToNewTransaction(Model model) {
		if(Objects.nonNull(f)) {
			List<UserAccount> listUserAccount = userAccountService.findByUsername(f.getUsername());			
			model.addAttribute("listAccounts", listUserAccount);
			   ModelAndView mav = new ModelAndView("new-transaction");
			   mav.addObject("listUserAccount", listUserAccount);
			   System.out.println(listUserAccount);
			   return mav;
			//return "new-transaction";
		
		}else {
			 ModelAndView mav = new ModelAndView("redirect:/");
			   
			   return mav;
		}
		
	}
	

	@PostMapping("/save-transaction")
	public String goToNewTransactionMicroservice(@RequestParam("accountno") int accountno, @RequestParam("toaccountnumber") int toaccountnumber, @RequestParam("transferamount") int transferamount, Model model) {
		
		if(Objects.nonNull(f)) {
		 restTemplate.getForObject("http://localhost:8083/transfer-money/"+f.getUsername()+"/"+accountno+"/"+toaccountnumber+"/"+transferamount+"", String.class);
			 	model.addAttribute("transferSuccess", "Successfully Transferred!");
			 	UserAccount x = userAccountService.getByUserAccount(accountno);
			 	userAccount.setAccountno(accountno);
			 	
			 	if(x.getTotalbal() > transferamount && transferamount > 0) {
				int transfer = transferamount;
				int newbal = x.getTotalbal() - transfer;
				userAccount.setTotalbal(newbal);
				HttpHeaders header = new HttpHeaders();
				System.out.println(userAccount.getTotalbal());
		        header.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
		        
		        HttpEntity<UserAccount> entitys = new HttpEntity<UserAccount>(userAccount, header);

		         restTemplate.exchange(
		           "http://localhost:8083/update-balance", HttpMethod.PUT, entitys, String.class).getBody();
		         
		        
		         x.setTotalbal(newbal);
		         UserAccount y = userAccountService.getByUserAccount(toaccountnumber);
		         if(Objects.nonNull(y)) {
		        	 int amount2 = transfer + y.getTotalbal();
		        	 y.setTotalbal(amount2);
		        	 y.setAccountno(toaccountnumber);
		        	 HttpHeaders headers = new HttpHeaders();
		        	 headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
				        
				        HttpEntity<UserAccount> entity = new HttpEntity<UserAccount>(y, headers);

				         restTemplate.exchange(
				           "http://localhost:8083/update-balance", HttpMethod.PUT, entity, String.class).getBody();
				        
		         }
		         
		         return "home";
			 	}else {
			 		model.addAttribute("error", "Error! Please try again!");
			 		return "redirect:/new-transaction";
			 	}
			 		
		
			 	}
			 	return "redirect:/";
	}
	
	@RequestMapping("/home")
	public String homes() {
		if(Objects.nonNull(f)) {
		return "home";
		}else {
			return "redirect:/";
		}
	}
	
	@RequestMapping("/logout")
	public String logout() {
		f.setUsername(null);
		return "redirect:/";
	}
	
	/*@PutMapping("/update-balance")
	public UserAccount updateUserAccount(@RequestBody UserAccount userAccount) {
		
		return transService.updateUserAccount(userAccount);
		if(userAccount.getTotalBal()  > transferAmount && accountNo != null) {
			int total = userAccount.getTotalBal() - transferAmount;
			userAccount.setTotalBal(total);		
			
		}else {
			return "Insuficient Balance";
		}
	}*/
	
	/*@GetMapping("/update")
	public String update(){
		userAccount.setAccountno(trans.getAccountno());
		int transfer = trans.getTransferamount();
		int bal = userAccount.getTotalbal();
		int newbal = bal - transfer;
		userAccount.setTotalbal(newbal);
		HttpHeaders header = new HttpHeaders();
        header.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
        
        HttpEntity<UserAccount> entitys = new HttpEntity<UserAccount>(userAccount, header);

         restTemplate.exchange(
           "http://localhost:8083/update-balance", HttpMethod.PUT, entitys, String.class).getBody();
			return "new-transaction";
	}*/
	
	
}

	
